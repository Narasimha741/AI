def is_safe(board, row, col):
    # Check if there is a queen in the same row
    if any(board[row]):
        return False

    # Check if there is a queen in the same column
    if any(row[col] for row in board):
        return False

    # Check if there is a queen in the same diagonals
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] == 1 and (i + j == row + col or i - j == row - col):
                return False

    return True

def solve_n_queens_util(board, row):
    if row == len(board):
        return True  # All queens are placed successfully

    for col in range(len(board[row])):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place the queen

            if solve_n_queens_util(board, row + 1):
                return True  # Continue with the next row

            board[row][col] = 0  # If placing the queen in the current position doesn't lead to a solution, backtrack

    return False  # No valid placement in this row

def solve_n_queens():
    n = 8  # Number of queens (8 for the 8-Queens problem)
    board = [[0] * n for _ in range(n)]

    if solve_n_queens_util(board, 0):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution found.")

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))
    print()

if __name__ == "__main__":
    solve_n_queens()
