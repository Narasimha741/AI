def water_jug_problem(capacity_jug1, capacity_jug2, target_amount):
    visited_states = set()

    def dfs(jug1, jug2):
        if jug1 == target_amount or jug2 == target_amount:
            print("Solution found:")
            print("Jug 1:", jug1, "units")
            print("Jug 2:", jug2, "units")
            return True

        state = (jug1, jug2)
        if state in visited_states:
            return False

        visited_states.add(state)

        # Fill jug1
        if jug1 < capacity_jug1:
            if dfs(capacity_jug1, jug2):
                print("Fill Jug 1")
                return True

        # Fill jug2
        if jug2 < capacity_jug2:
            if dfs(jug1, capacity_jug2):
                print("Fill Jug 2")
                return True

        # Empty jug1
        if jug1 > 0:
            if dfs(0, jug2):
                print("Empty Jug 1")
                return True

        # Empty jug2
        if jug2 > 0:
            if dfs(jug1, 0):
                print("Empty Jug 2")
                return True

        # Pour water from jug1 to jug2
        pour_amount = min(jug1, capacity_jug2 - jug2)
        if pour_amount > 0:
            if dfs(jug1 - pour_amount, jug2 + pour_amount):
                print("Pour", pour_amount, "units from Jug 1 to Jug 2")
                return True

        # Pour water from jug2 to jug1
        pour_amount = min(jug2, capacity_jug1 - jug1)
        if pour_amount > 0:
            if dfs(jug1 + pour_amount, jug2 - pour_amount):
                print("Pour", pour_amount, "units from Jug 2 to Jug 1")
                return True

        return False

    if not dfs(0, 0):
        print("No solution found.")

if __name__ == "__main__":
    jug1_capacity = 4  # Capacity of Jug 1
    jug2_capacity = 3  # Capacity of Jug 2
    target_amount = 2  # Target amount of water

    water_jug_problem(jug1_capacity, jug2_capacity, target_amount)
